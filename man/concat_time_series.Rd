% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/concat_time_series.R
\name{concat_time_series}
\alias{concat_time_series}
\title{Concatenation of Time series method}
\usage{
concat_time_series(params, reference_geo_code = "US", zero_replace = 0.1)
}
\arguments{
\item{params}{A list containing parameters including logger, folder_name, data_format, time_window, and other necessary parameters for sub-functions.}

\item{reference_geo_code}{This is the same geo code that is used in collecting time_series data. If the time_series data for that geo is not collected beforehand, or the file does not exist, it will throw and error. Default is 'US'}

\item{zero_replace}{As data from different time periods are rescaled, sometimes the last/first data point of a period might be zero. Then the calculation will throw error or everything single data point will become zero. To avoid that, we are tweaking the zeroes to be of an insignificant number to carry on with the calculation.}
}
\description{
Concatenation of Time series method
}
\details{
This method will concat the time series data collected in time_series() method.
Because the data points in time_series is independent of each other, they needs to be re-aligned to get correct index for the given time period.
This method concatenates time_series data for all the period and gives back the combined rescaled time_series data for the reference timeline.
This rescaled time_series data will be used in the next method to rescale the cross_section data.
}
\examples{
\donttest{
# Please note that this example may take a few minutes to run
# Create a temporary folder for the example

# Ensure the temporary folder is cleaned up after the example
# Run the function with the temporary folder
params <- initialize_request_trends(
  keyword = "Joe Biden",
  topic = "/m/012gx2",
  folder_name = file.path(tempdir(), "biden_save"),
  start_date = "2017-12-31",
  end_date = "2024-05-19",
  data_format = "weekly"
)
result <- TRUE

# Run the time_series function and handle TooManyRequestsError
tryCatch({
  time_series(params, reference_geo_code = "US-CA")
}, error = function(e) {
  message("An error occurred: ", conditionMessage(e))
  result <- FALSE # Indicate failure only on error
})

# Check if at least one file is present in the expected directory
data_dir <- file.path("biden_save", "weekly", "over_time", "US-CA")
if (result && length(list.files(data_dir)) > 0) {
  concat_time_series(params, reference_geo_code = "US-CA")
} else {
  if (result) {
    message("Skipping concat_time_series because no files were found in the expected directory.")
  } else {
    message("Skipping concat_time_series because time_series failed.")
  }
  result <- FALSE
}


# Clean up temporary directory
on.exit(unlink(tempdir(), recursive = TRUE))
}
}
