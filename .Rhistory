})
}
}
}
time_series <- function(params, reference_geo_code = "US") {
logger <- params$logger
folder_name <- params$folder_name
data_format <- params$data_format
time_window <- params$time_window
#print(params)
print(params$time_window)
logger$info("Collecting Over Time Data now")
create_required_directory(file.path(folder_name, data_format, "over_time"))
create_required_directory(file.path(folder_name, data_format, "over_time", reference_geo_code))
if (!is.null(time_window)) {
time_series_nmonthly(params, reference_geo_code)
} else {
print("minthly")
time_series_monthly(params, reference_geo_code)
}
logger$info("[bold green]Collected Time Series Data![/]")
}
concat_time_series <- function(params, reference_geo_code = "US", zero_replace = 0.1) {
logger <- params$logger
folder_name <- params$folder_name
data_format <- params$data_format
keyword <- params$keyword
print(keyword)
logger$info("Concatenating Over Time data now", extra = list(markup = TRUE))
# Create Folder to save the concatenated time series data
create_required_directory(file.path(folder_name, data_format, "concat_time_series"))
path_to_time_data <- file.path(folder_name, data_format, "over_time", reference_geo_code)
# List to store DataFrames
dfs <- list()
# Read each CSV file into a DataFrame and store in dfs list
files <- list.files(path_to_time_data, full.names = TRUE)
for (file in files) {
df <- read.csv(file, check.names = FALSE)
dfs[[length(dfs) + 1]] <- df
}
df <- df[, colSums(is.na(df)) != nrow(df)]
# Replace zeros with zero_replace value
for (i in seq_along(dfs)) {
dfs[[i]][dfs[[i]][[keyword]] == 0, keyword] <- zero_replace
}
# Concatenate the time series data
prev_window <- dfs[[1]]
#print(prev_window)
for (periods in 2:length(dfs)) {
#print(periods)
next_window <- dfs[[periods]]
prev_window_multiplier <- 100 / prev_window[nrow(prev_window), keyword]
next_window_multiplier <- 100 / next_window[1, keyword]
prev_window[, keyword] <- prev_window[, keyword] * prev_window_multiplier
next_window[, keyword] <- next_window[, keyword] * next_window_multiplier
prev_window <- rbind(prev_window[-nrow(prev_window), ], next_window)
#print(prev_window[, keyword])
}
# Write concatenated DataFrame to CSV
concat_file_path <- file.path(folder_name, data_format, "concat_time_series", paste0(reference_geo_code, ".csv"))
write.csv(prev_window, concat_file_path, row.names = FALSE)
logger$info("[bold green]Concatenation Complete! :)[/]", extra = list(markup = TRUE))
}
convert_cross_section <- function(params, reference_geo_code = "US", zero_replace = 0.1) {
logger <- params$logger
folder_name <- params$folder_name
data_format <- params$data_format
keyword <- params$keyword
start_date <- params$start_date
end_date <- params$end_date
logger$info("Rescaling cross section Data now", extra = list(markup = TRUE))
# Create required directories
create_required_directory(file.path(folder_name, data_format, "converted"))
create_required_directory(file.path(folder_name, data_format, "converted", reference_geo_code))
concat_file_path <- file.path(folder_name, data_format, "concat_time_series", paste0(reference_geo_code, ".csv"))
if (file.exists(concat_file_path)) {
time_series_concat <- read.csv(concat_file_path, header = TRUE, check.names = FALSE)
} else {
files_in_over_time <- list.files(file.path(folder_name, data_format, "over_time", reference_geo_code), full.names = TRUE)
time_series_concat <- read.csv(files_in_over_time, header = TRUE, check.names = FALSE)
#print(as.numeric(time_series_concat[[keyword]][10]))
}
names(time_series_concat)[names(time_series_concat) == ''] <- 'date'
print(colnames(time_series_concat))
# Initialize empty data frame for conversion result
conv <- data.frame()
# Iterate over rows in time_series_concat
for (ind in seq_len(nrow(time_series_concat))) {
record <- format(as.POSIXct(as.character(time_series_concat$date[ind]), format = "%Y-%m-%d %H:%M:%S"), "%Y%m%d")
time_ind <- as.numeric(time_series_concat[[keyword]][ind])
#cat(record, "\n")
#cat(time_ind, "\n")
# Construct snapshot file path based on record date
snap_file <- list.files(path = file.path(folder_name, data_format, "by_region"), pattern = paste0(".*", record, ".*csv"), full.names = TRUE)[1]
#print(snap_file)
# Extract column name from snapshot file
if (Sys.info()['sysname'] == "win32") {
fl_name <- tail(unlist(strsplit(snap_file, "\\\\")), 1)
} else {
fl_name <- tail(unlist(strsplit(snap_file, "/")), 1)
#print(fl_name)
}
col_name <- gsub("\\.csv", "", fl_name)
#cat(col_name)
# Read snapshot data
snap_df <- read.csv(snap_file, header = TRUE, stringsAsFactors = FALSE, na.strings = "", check.names = FALSE)
#print(head(snap_df))
snap_df[[keyword]][is.na(snap_df[[keyword]])] <- zero_replace
# Find reference value based on geoCode
ref_value <- as.numeric(snap_df[snap_df$geoCode == reference_geo_code, keyword])
#print(ref_value)
# Calculate conversion multiplier
conv_multiplier <- time_ind / ref_value
#print(conv_multiplier)
# Perform conversion on snapshot dataframe
snap_df[[col_name]] <- round(snap_df[[keyword]] * conv_multiplier, 2)
print(snap_df[[col_name]])
#print(conv)
# Collect initial geoName and geoCode if it's the first iteration
if (ind == 1) {
conv <- snap_df[c("geoName", "geoCode")]
#print(ref_value)
#print(conv_multiplier)
}
# Append converted data to conv data frame
#conv[[col_name]] <- snap_df[[keyword]]
conv[[col_name]] <- snap_df[[col_name]]
#print(snap_df[[keyword]])
}
# Write converted DataFrame to CSV
write.csv(conv, file.path(folder_name, data_format, "converted", reference_geo_code, paste0("final-converted-",
format(start_date, "%Y%m%d"), "-",
format(end_date, "%Y%m%d"), ".csv")), row.names = FALSE)
logger$info("[bold green]DONE Converting! :) [/]", extra = list(markup = TRUE))
}
# Example usage
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_save_package",
start_date = "2019-12-29",  # Date string
end_date = "2024-05-19",     # Date string
data_format = "weekly"
)
time_series(params, reference_geo_code = "US-CA")
time_series(params, reference_geo_code = "US-CA")
setwd("/Users/malika/Desktop/PytrendsLongitudnalR")
install.packages("roxygen2")
devtools::load_all()
install.packages("devtools")
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(PytrendsLongitudnalR)
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_save_testing_package",
start_date = "2019-12-29",
end_date = "2024-05-19",
data_format = "weekly"
)
pwd
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_save",
start_date = "2019-12-29",  # Date string
end_date = "2024-05-19",     # Date string
data_format = "weekly"
)
devtools::load_all()
library(PytrendsLongitudnalR)
library(PytrendsLongitudnR)
# Example usage of functions
params <- list(
logger = your_logger_object,
pytrend = TrendReq(),
folder_name = "your_folder_name",
data_format = "daily",
start_date = "2024-01-01",
end_date = "2024-06-30",
keyword = "your_keyword",
topic = "your_topic"
)
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_save",
start_date = "2019-12-29",  # Date string
end_date = "2024-05-19",     # Date string
data_format = "weekly"
)
library(PytrendsLongitudnalR)
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_save",
start_date = "2019-12-29",  # Date string
end_date = "2024-05-19",     # Date string
data_format = "weekly"
)
library(PytrendsLongitudnalR)
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_save",
start_date = "2019-12-29",  # Date string
end_date = "2024-05-19",     # Date string
data_format = "weekly"
)
library(PytrendsLongitudnalR)
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_save",
start_date = "2019-12-29",  # Date string
end_date = "2024-05-19",     # Date string
data_format = "weekly"
)
devtools::load_all()  # Reloads your package into the current R session
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_save",
start_date = "2019-12-29",  # Date string
end_date = "2024-05-19",     # Date string
data_format = "weekly"
)
reticulate::py_discover_config()
install_python_deps()
devtools::install()
library(PytrendsLongitudnalR)
library(PytrendsLongitudnalR)
View(initialize_python_modules)
View(initialize_python_modules)
View(initialize_python_modules)
devtools::document()
virtualenv pytrends-in-r
devtools::document()
devtools::document()
devtools::install()
library(PytrendsLongitudnalR)
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_save",
start_date = "2019-12-29",  # Date string
end_date = "2024-05-19",     # Date string
data_format = "weekly"
)
ls()
rm(list = ls())
ls()
library(reticulate)
virtualenv_create(envname = "pytrends-in-r")
virtualenv_install("pytrends-in-r", packages = c("pandas", "requests", "pytrends", "rich"))
use_virtualenv("pytrends-in-r", required = TRUE)
devtools::document()
devtools::install()
library(PytrendsLongitudnalR)
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_save",
start_date = "2019-12-29",  # Date string
end_date = "2024-05-19",     # Date string
data_format = "weekly"
)
setwd("/Users/malika/Desktop")
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_pack",
start_date = "2019-12-29",  # Date string
end_date = "2024-05-19",     # Date string
data_format = "weekly"
)
cross_section(params, geo = "US", resolution="REGION")
time_series(params, reference_geo_code = "US-CA")
library(PytrendsLongitudnalR)
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_pack",
start_date = "2019-12-29",  # Date string
end_date = "2024-05-19",     # Date string
data_format = "weekly"
)
?initialize_request_trends
?cross_section
usethat::use_vignette("introduction")
devtools::use_vignette("introduction")
library(devtools)
usethat::use_vignette("introduction")
usethis::use_vignette("PytrendsLongitudnalR")
setwd("/Users/malika/Desktop/PytrendsLongitudnalR")
usethis::use_vignette("PytrendsLongitudnalR")
usethis::use_vignette("PytrendsLongitudnalR")
devtools::document()
devtools::document()
?lubridate
devtools::document()
lubridate::months(1)
lubridate::months.numeric(1)
months(2)
lubridate:::months(2)
lubridate::months(2)
lubridate:::months.numeric(3)
lubridate:::months.numeric(2)
lubridate::months(1)
lubridate:::months(1)
lubridate::weeks(1)
lubridate::weeks(1) - lubridate::days(1)
lubridate::months(1) - lubridate::days(1)
lubridate:::months.numeric(1) - lubridate::days(1)
months(1) - lubridate::days(1)
devtools::document()
devtools::build()
devtools::document()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
use_mit_license()
usethis::use_mit_license()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
devtools::document()
devtools::build()
?tools::undoc
undoc(PytrendsLongitudnalR)
tools::undoc(PytrendsLongitudnalR)
library(PytrendsLongitudnalR)
tools::undoc(PytrendsLongitudnalR)
tools::undoc("PytrendsLongitudnalR")
library(roxygen2)
roxygenize()
tools::undoc(PytrendsLongitudnalR)
library(PytrendsLongitudnalR)
tools::undoc("PytrendsLongitudnalR")
packageVersion("roxygen2")
devtools::document()
devtools::build()
tools::undoc("PytrendsLongitudnalR")
grep export NAMESPACE
devtools::document()
pkgload::dev_help('install_python_deps')
devtools::build()
tools::undoc("PytrendsLongitudnalR")
?PytrendsLongitudnalR::install_python_deps
unlink("man", recursive = TRUE)
unlink("NAMESPACE")
devtools::document()
roxygen2::roxygenise()
devtools::install()
devtools::build()
devtools::install()
tools::undoc("PytrendsLongitudnalR")
tools::undoc("PytrendsLongitudnalR")
?tools::undoc
tools::undoc("ggplot")
tools::undoc("PytrendsLongitudnalR")
tools::undoc("PytrendsLongitudnalR")
unlink("man", recursive = TRUE)
unlink("NAMESPACE")
devtools::document()
tools::undoc("PytrendsLongitudnalR")
unlink("man", recursive = TRUE)
unlink("NAMESPACE")
tools::undoc("PytrendsLongitudnalR")
tools::undoc("PytrendsLongitudnalR")
devtools::document()
tools::undoc("PytrendsLongitudnalR::concat_time_series")
objs = mget(ls("PytrendsLongitudnalR"), inherits = TRUE)
ls()
library(PytrendsLongitudnalR)
ls()
ls
params <- initialize_request_trends(
keyword = "Joe Biden",
topic = "/m/012gx2",
folder_name = "biden_pack",
start_date = "2019-12-29",  # Date string
end_date = "2024-05-19",     # Date string
data_format = "weekly"
)
setwd("/Users/malika/Desktop/PytrendsLongitudnalR")
r_files <- list.files(file.path("/Users/malika/Desktop/PytrendsLongitudnalR", "R"), pattern = "\\.R$", full.names = TRUE)
r_files
identify_replacement_functions <- function(file) {
lines <- readLines(file)
# Regular expression to match replacement functions
replacement_func_pattern <- "^\\s*([a-zA-Z0-9._]+)\\s*<-\\s*function\\("
replacement_funcs <- grep(replacement_func_pattern, lines, value = TRUE)
# Extract function names
func_names <- sub(replacement_func_pattern, "\\1", replacement_funcs)
return(func_names)
}
all_replacement_funcs <- character()
# Iterate over each file and identify replacement functions
for (file in r_files) {
replacement_funcs <- identify_replacement_functions(file)
if (length(replacement_funcs) > 0) {
all_replacement_funcs <- c(all_replacement_funcs, replacement_funcs)
}
}
if (length(all_replacement_funcs) > 0) {
cat("Replacement functions identified in the package:\n")
print(all_replacement_funcs)
} else {
cat("No replacement functions found in the package.\n")
}
identify_replacement_functions <- function(file) {
lines <- readLines(file)
# Regular expression to match replacement functions
replacement_func_pattern <- "^\\s*([a-zA-Z0-9._]+)\\s*<-\\s*function\\s*\\("
replacement_funcs <- grep(replacement_func_pattern, lines, value = TRUE)
# Extract function names
func_names <- sub(replacement_func_pattern, "\\1", replacement_funcs)
return(func_names)
}
# Initialize a vector to store all replacement function names
all_replacement_funcs <- character()
# Iterate over each file and identify replacement functions
for (file in r_files) {
replacement_funcs <- identify_replacement_functions(file)
if (length(replacement_funcs) > 0) {
all_replacement_funcs <- c(all_replacement_funcs, replacement_funcs)
}
}
if (length(all_replacement_funcs) > 0) {
cat("Replacement functions identified in the package:\n")
print(all_replacement_funcs)
} else {
cat("No replacement functions found in the package.\n")
}
?PytrendsLongitudnalR
?PytrendsLongitudnalR::install_python_deps
find_s3_methods <- function(package_name) {
package_path <- find.package(package_name)
r_files <- list.files(file.path(package_path, "R"), pattern = "\\.R$", full.names = TRUE)
generic_methods <- c()
for (file in r_files) {
lines <- readLines(file)
for (line in lines) {
if (grepl("UseMethod", line)) {
generic <- sub(".*UseMethod\\(\"(.*)\"\\).*", "\\1", line)
generic_methods <- c(generic_methods, generic)
}
}
}
generics <- unique(generic_methods)
methods <- sapply(generics, function(g) methods(g))
list(generics = generics, methods = methods)
}
# Example usage
s3_methods <- find_s3_methods("your_package_name")
print(s3_methods)
find_s3_methods <- function(package_name) {
package_path <- find.package(package_name)
r_files <- list.files(file.path(package_path, "R"), pattern = "\\.R$", full.names = TRUE)
generic_methods <- c()
for (file in r_files) {
lines <- readLines(file)
for (line in lines) {
if (grepl("UseMethod", line)) {
generic <- sub(".*UseMethod\\(\"(.*)\"\\).*", "\\1", line)
generic_methods <- c(generic_methods, generic)
}
}
}
generics <- unique(generic_methods)
methods <- sapply(generics, function(g) methods(g))
list(generics = generics, methods = methods)
}
s3_methods <- find_s3_methods("PytrendsLongitudnalR")
print(s3_methods)
params$logger
params$folder_name
params$data_format
params$keyword
params$topic
params$topic
params
class(params)
x <- list(name ="Arjun", account_no = 1234,
saving = 1500, withdrawn = 234)
class(x)<-"bank"
x
class(x)
class(concat_time_series())
class(concat_time_series)
class(PytrendsLongitudnalR)
packageVersion("roxygen2")
tools::check_doc()
devtools::check_doc()
check_man("PytrendsLongitudnalR")
devtools::check_man()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::install()
